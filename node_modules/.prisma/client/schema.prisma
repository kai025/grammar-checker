// =============================================================================
// AUTO-GENERATED SCHEMA - DO NOT EDIT DIRECTLY
// This file is generated from separate schema files.
// Edit the individual files in prisma/models/ and prisma/enums.prisma
// =============================================================================

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// ENUMS
// =============================================================================

enum UserRole {
  ADMIN
  USER
  VIEWER
}

enum Status {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  ERROR
}

// =============================================================================
// MODELS
// =============================================================================

// =============================================================================
// CORE ENTITIES
// =============================================================================

model Organization {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique // Optional email domain for auto-assignment
  settings  Json? // Organization-specific settings
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  users User[]

  @@map("organizations")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  password       String
  name           String
  role           String    @default("CFO")
  organizationId String    @map("organization_id")
  phone          String?
  avatar         String?
  isActive       Boolean   @default(true)
  lastLoginAt    DateTime?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  organization    Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sessions        UserSession[]
  grammarAnalyses GrammarAnalysis[] // Grammar analyses

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// =============================================================================
// GRAMMAR ANALYSIS MODELS
// =============================================================================

model GrammarAnalysis {
  id             String   @id @default(cuid())
  userId         String?  @map("user_id") // Nullable for anonymous users
  text           String   @db.Text
  language       String   @default("en")
  totalErrors    Int      @map("total_errors")
  processingTime Int      @map("processing_time") // in milliseconds
  errors         Json // Stored as JSON string
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdAt])
  @@map("grammar_analyses")
}
