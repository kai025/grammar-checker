#!/usr/bin/env node
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var fs_1 = require("fs");
var path_1 = require("path");
var color_loggers_1 = require("color-loggers");
var node_process_1 = __importDefault(require("node:process"));
var error = new color_loggers_1.Red("[Error]: ");
var info = new color_loggers_1.Blue("[Start]: ");
var success = new color_loggers_1.Green("[Done]: ");
var inputs = new Set(node_process_1.default.argv);
var packagePath;
var global = "";
if (inputs.has("-g") || inputs.has("--global")) {
    global = "global";
    packagePath = (0, path_1.resolve)(node_process_1.default.env[node_process_1.default.platform === "win32" ? "USERPROFILE" : "HOME"], ".config", "yarn", "global", "package.json");
}
else {
    packagePath = (0, path_1.resolve)(node_process_1.default.cwd(), "package.json");
}
if (!(0, fs_1.existsSync)(packagePath)) {
    error.log("Cannot find ".concat(packagePath));
    node_process_1.default.exit(1);
}
var packageJson = require(packagePath);
var ignorePkgs = new Set();
if (packageJson["yarn-upgrade-all"] && packageJson["yarn-upgrade-all"].ignore) {
    ignorePkgs = new Set(packageJson["yarn-upgrade-all"].ignore);
}
var depTypes = {
    dependencies: "",
    devDependencies: "--dev",
    peerDependencies: "--peer",
};
var params = Array.from(inputs).filter(function (arg) {
    return arg.startsWith("-") && arg !== "-g" && arg !== "--global";
});
Object.keys(depTypes).forEach(function (depType) {
    if (!packageJson[depType]) {
        return;
    }
    var deps = Object.keys(packageJson[depType])
        .filter(function (dep) { return !ignorePkgs.has(dep); })
        .filter(function (dep) { return !packageJson[depType][dep].startsWith("."); }) // relative path
        .filter(function (dep) { return !packageJson[depType][dep].startsWith("file:"); }); // file path
    if (deps.length === 0) {
        return;
    }
    var argv = __spreadArray(__spreadArray(__spreadArray(["yarn", global, "add"], deps, true), [depTypes[depType]], false), params, true);
    var command = argv.filter(function (c) { return c !== ""; }).join(" ");
    try {
        info.log(command);
        (0, child_process_1.execSync)(command, { stdio: [] });
        success.log(command);
    }
    catch (e) {
        error.log("".concat(command, " - ").concat(e));
    }
});
